ggplot(mapping = aes(df$disco_iops_total, df$disco_read_count)) +
geom_point(color = "red") +
geom_smooth(method = "lm", color = "green")
#Relação iops disco e escrever
#relação forte
cor(df$disco_iops_total, df$disco_write_count)
plot(df$disco_iops_total, df$disco_write_count)
ggplot(mapping = aes(df$disco_iops_total, df$disco_write_count)) +
geom_point(color = "red") +
geom_smooth(method = "lm", color = "green")
#Relação entre volume de dados transferidos por segundo e quantidade de operações por segundo
#relação fraca
#o IOPS ele é quantificado por cluster lido ou escrito, ou seja o IOPS não necessariamente segue em linearidade com o throughput
#Arquivos pequenos → mesmo throughput, mais IOPS (muitas operações pequenas)
#Arquivos grandes → mesmo throughput, menos IOPS (leitura sequencial mais eficiente)
cor(df$disco_throughput_mbs,df$disco_iops_total)
ggplot(mapping = aes(df$disco_throughput_mbs, df$disco_iops_total)) +
geom_point(color = "red") +
geom_smooth(method = "lm", color = "green")
#Relação de escrever e ler
#relação fraca
cor(df$disco_write_count, df$disco_read_count)
ggplot(mapping = aes(df$disco_write_count, df$disco_read_count)) +
geom_point(color = "red") +
geom_smooth(method = "lm", color = "green")
#relação entre RAM e CPU
#correlação fraca
cor(df$disco_throughput_mbs,df$uso_cpu_total_.)
ggplot(mapping = aes(df$uso_ram_total_., df$uso_cpu_total_.)) +
geom_point(color = "red") +
geom_smooth(method = "lm", color = "green")
boxplot(df$disco_read_count,
df$disco_write_count,
df$disco_iops_total,
names = c("Read", "Write", "IOPS"),
col = c("lightblue", "lightgreen", "lightpink"),
main = "Distribuição de notas por prova",
ylab = "Nota (0-10)"
)
boxplot(df$uso_cpu_total_.)
boxplot(df$disco_read_count,
df$disco_write_count,
df$disco_iops_total,
names = c("Read", "Write", "IOPS"),
col = c("lightblue", "lightgreen", "lightpink"),
main = "Distribuição de notas por prova",
ylab = "Nota (0-10)"
)
boxplot(df$disco_read_count,
df$disco_write_count,
df$disco_iops_total,
names = c("Read", "Write", "IOPS"),
col = c("lightblue", "lightgreen", "lightpink"),
main = "Utilização de disco"
)
boxplot(df$uso_cpu_total_.)
install.packages("tidyr")
library("tidyr")
boxplot(df$uso_ram_total_.)
boxplot(df$uso_disco_total_.)
boxplot(df$uso_cpu_total_.,
df$uso_ram_total_.,
df$uso_disco_total_.)
boxplot(
dados$`disco_read_count`,
dados$`disco_write_count`,
dados$`disco_iops_total`,
names = c("Read Count", "Write Count", "IOPS"),
col = c("lightblue", "lightgreen", "lightpink"),
main = "Utilização de Disco - Distribuição Geral",
ylab = "Contagem / IOPS",
# Adicione o log para tentar visualizar melhor as escalas diferentes
# Se o log for muito difícil de interpretar, prefira gráficos separados.
log = "y"
)
boxplot(
df$`disco_read_count`,
df$`disco_write_count`,
df$`disco_iops_total`,
names = c("Read Count", "Write Count", "IOPS"),
col = c("lightblue", "lightgreen", "lightpink"),
main = "Utilização de Disco - Distribuição Geral",
ylab = "Contagem / IOPS",
# Adicione o log para tentar visualizar melhor as escalas diferentes
# Se o log for muito difícil de interpretar, prefira gráficos separados.
log = "y"
)
boxplot(
df$`disco_read_count`,
df$`disco_write_count`,
df$`disco_iops_total`,
names = c("Read Count", "Write Count", "IOPS"),
col = c("lightblue", "lightgreen", "lightpink"),
main = "Utilização de Disco - Distribuição Geral",
ylab = "Contagem / IOPS"
)
boxplot(dados$`uso_cpu_total_%` ~ dados$`identificao-mainframe`,
main = "Uso de CPU Total (%) por Mainframe",
xlab = "Identificação do Mainframe",
ylab = "Uso de CPU (%)",
col = rainbow(length(unique(dados$`identificao-mainframe`))))
boxplot(df$`uso_cpu_total_%` ~ df$`identificao-mainframe`,
main = "Uso de CPU Total (%) por Mainframe",
xlab = "Identificação do Mainframe",
ylab = "Uso de CPU (%)",
col = rainbow(length(unique(dados$`identificao-mainframe`))))
boxplot(df$uso_cpu_total_%,
boxplot(df$uso_cpu_total_%,
boxplot(df$uso_cpu_total_.,
main = "Uso de CPU Total (%) por Mainframe",
xlab = "Identificação do Mainframe",
ylab = "Uso de CPU (%)",
col = rainbow(length(unique(dados$`identificao-mainframe`))))
boxplot(df$uso_cpu_total_.,
main = "Uso de CPU Total (%) por Mainframe",
xlab = "Identificação do Mainframe",
ylab = "Uso de CPU (%)",
)
boxplot(df$uso_cpu_total_.,
main = "Uso de CPU Total (%) por Mainframe",
xlab = "Identificação do Mainframe",
ylab = "Uso de CPU (%)"
)
boxplot(df$uso_cpu_total_.,
main = "Uso de CPU Total (%)",
ylab = "Porcentagem"
)
boxplot(df$uso_ram_total_.,
main = "Uso de RAM Total (%)",
ylab = "Porcentagem"
)
boxplot(df$disco_read_count,
df$disco_write_count,
names = c("Read", "Write", "IOPS"),
col = c("lightblue", "lightgreen", "lightpink"),
main = "Utilização de disco"
)
boxplot(df$disco_read_count,
df$disco_write_count,
names = c("Read", "Write"),
col = c("lightblue", "lightgreen"),
main = "Utilização de disco"
)
boxplot(df$disco_read_count,
df$disco_write_count,
names = c("Read", "Write"),
col = c("lightblue", "lightgreen"),
main = "Utilização de disco"
)
boxplot(df$disco_read_count,
main = "Uso de CPU Total (%)",
ylab = "Porcentagem"
)
boxplot(df$disco_read_count,
df$disco_write_count,
names = c("Read", "Write"),
col = c("lightblue", "lightgreen"),
main = "Utilização de disco"
)
boxplot(df$disco_read_count,
df$disco_write_count,
df$disco_iops_total,
names = c("Read", "Write"),
col = c("lightblue", "lightgreen"),
main = "Utilização de disco"
)
boxplot(df$disco_read_count,
df$disco_write_count,
df$disco_iops_total,
names = c("Read", "Write"),
col = c("lightblue", "lightgreen"),
main = "Utilização de disco"
)
boxplot(df$disco_read_count,
df$disco_write_count,
df$disco_iops_total,
names = c("Read", "Write", "IOPS"),
col = c("lightblue", "lightgreen", "lightpink"),
main = "Utilização de disco"
)
#Relação entre contagem de leitura, contagem de escrita e total de operações I/O por segundo
boxplot(df$disco_read_count,
df$disco_write_count,
df$disco_iops_total,
names = c("Read", "Write", "IOPS"),
col = c("lightblue", "lightgreen", "lightpink"),
main = "Utilização de disco"
)
#Distribuição da porcentagem total de CPU
boxplot(df$uso_cpu_total_.,
main = "Uso de CPU Total (%)",
ylab = "Porcentagem"
)
#Distribuição da porcentagem total de RAM
boxplot(df$uso_ram_total_.,
main = "Uso de RAM Total (%)",
ylab = "Porcentagem"
)
#Distribuição da porcentagem total de disco
boxplot(df$uso_disco_total_.,
main = "Uso de Disco Total (%)",
ylab = "Porcentagem"
)
ObesityDataSet <- read.csv("~/Faculdade/Aula-de-Calculo/Aula10/ObesityDataSet.csv")
View(ObesityDataSet)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
data <- read.csv("ObesityDataSet.csv")
data <- read.csv("ObesityDataSet.csv")
View(ObesityDataSet)
data <- read.csv("ObesityDataSet")
data <- read.csv("ObesityDataSet.csv")
library(ggplot2)
data <- read.csv("ObesityDataSet.csv")
df <- read.csv("ObesityDataSet.csv")
df <- read.csv("ObesityDataSet.csv")
setwd("~/Faculdade/Aula-de-Calculo/Aula10")
df <- read.csv("ObesityDataSet.csv")
# Selecionar colunas numéricas para correlação e plotagem
numeric_cols <- c("Age", "Height", "Weight", "FCVC", "NCP", "CH2O", "FAF", "TUE")
numeric_data <- data[numeric_cols]
# Calcular a matriz de correlação de Pearson
cor_matrix <- cor(numeric_data)
numeric_data <- data[numeric_cols]
# Calcular a matriz de correlação de Pearson
cor_matrix <- cor(data[numeric_cols])
# 1. Carregar o dataset
data <- read.csv("ObesityDataSet.csv")
# 2. Selecionar colunas numéricas para correlação
# As colunas que parecem ser numéricas e adequadas para o cálculo da correlação são:
# Age, Height, Weight, FCVC, NCP, CH2O, FAF, TUE
numeric_cols <- c("Age", "Height", "Weight", "FCVC", "NCP", "CH2O", "FAF", "TUE")
numeric_data <- data[numeric_cols]
# 3. Calcular a matriz de correlação de Pearson
# O argumento 'use="complete.obs"' lida com valores faltantes se existirem
cor_matrix <- cor(numeric_data, use = "complete.obs")
# Converter a matriz de correlação em um data frame para análise
cor_df <- as.data.frame(as.table(cor_matrix))
colnames(cor_df) <- c("Var1", "Var2", "Correlation")
# Remover correlações de uma variável consigo mesma
cor_df <- cor_df[cor_df$Var1 != cor_df$Var2, ]
# Ordenar por valor absoluto da correlação para identificar os pares mais fortes
cor_df$Abs_Correlation <- abs(cor_df$Correlation)
cor_df <- cor_df[order(-cor_df$Abs_Correlation), ]
# Remover duplicações (ex: Var1-Var2 e Var2-Var1)
top_correlations_unique <- cor_df[!duplicated(apply(cor_df[, c("Var1", "Var2")], 1, sort)), ]
top_correlations <- top_correlations_unique[1:3, ] # Pegar as 3 maiores correlações para plotar
# Exibir as 3 principais correlações e o comentário sobre a força
cat("--- Correlações de Pearson (Somente Fortes/Fracas) ---\n")
for (i in 1:nrow(top_correlations)) {
var1 <- top_correlations$Var1[i]
var2 <- top_correlations$Var2[i]
corr <- top_correlations$Correlation[i]
# Lógica de classificação simples (geralmente |r| < 0.3 é fraca)
forca <- ifelse(abs(corr) >= 0.7, "Forte", "Fraca")
cat(sprintf("Correlação entre %s e %s: %.6f \u2192 Correlação %s\n", var1, var2, corr, forca))
}
cat("------------------------------------------------------\n\n")
# Par 1: A Correlação mais forte
var1_p1 <- as.character(top_correlations$Var1[1])
var2_p1 <- as.character(top_correlations$Var2[1])
corr_p1 <- top_correlations$Correlation[1]
forca_p1 <- ifelse(abs(corr_p1) >= 0.7, "Forte", "Fraca")
plot_1 <- ggplot(data, aes_string(x = var1_p1, y = var2_p1)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(title = paste0("Regressão: ", var2_p1, " vs. ", var1_p1,
" (Correlação ", forca_p1, ")"),
subtitle = paste0("r = ", round(corr_p1, 4)),
x = var1_p1,
y = var2_p1) +
theme_minimal()
print(plot_1)
# Par 2: A segunda Correlação mais forte
var1_p2 <- as.character(top_correlations$Var1[2])
var2_p2 <- as.character(top_correlations$Var2[2])
corr_p2 <- top_correlations$Correlation[2]
forca_p2 <- ifelse(abs(corr_p2) >= 0.7, "Forte", "Fraca")
plot_2 <- ggplot(data, aes_string(x = var1_p2, y = var2_p2)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = paste0("Regressão: ", var2_p2, " vs. ", var1_p2,
" (Correlação ", forca_p2, ")"),
subtitle = paste0("r = ", round(corr_p2, 4)),
x = var1_p2,
y = var2_p2) +
theme_minimal()
print(plot_2)
# Par 3: A terceira Correlação mais forte
var1_p3 <- as.character(top_correlations$Var1[3])
var2_p3 <- as.character(top_correlations$Var2[3])
corr_p3 <- top_correlations$Correlation[3]
forca_p3 <- ifelse(abs(corr_p3) >= 0.7, "Forte", "Fraca")
plot_3 <- ggplot(data, aes_string(x = var1_p3, y = var2_p3)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", color = "darkgreen", se = FALSE) +
labs(title = paste0("Regressão: ", var2_p3, " vs. ", var1_p3,
" (Correlação ", forca_p3, ")"),
subtitle = paste0("r = ", round(corr_p3, 4)),
x = var1_p3,
y = var2_p3) +
theme_minimal()
print(plot_3)
ObesityDataSet <- read.csv("~/Faculdade/Aula-de-Calculo/Aula10/ObesityDataSet.csv")
View(ObesityDataSet)
library(ggplot2)
data <- read.csv("ObesityDataSet.csv")
# 2. Selecionar colunas numéricas para correlação
numeric_cols <- c("Age", "Height", "Weight", "FCVC", "NCP", "CH2O", "FAF", "TUE")
numeric_data <- data[numeric_cols]
# 3. Calcular as correlações de interesse diretamente (mantendo a ordem das mais fortes)
# As correlações mais fortes são: Weight vs Height, Age vs Weight, FAF vs TUE
corr_wh <- cor(data$Weight, data$Height, use = "complete.obs")
corr_aw <- cor(data$Weight, data$Age, use = "complete.obs")
corr_ft <- cor(data$FAF, data$TUE, use = "complete.obs")
# 4. Comentários sobre a Correlação (Simples)
cat("--- Comparações de Correlação (Somente Fortes/Fracas) ---\n")
# Correlação 1: Weight e Height
forca_wh <- ifelse(abs(corr_wh) >= 0.7, "Forte", "Fraca")
cat(sprintf("Weight vs. Height: %.6f \u2192 Correlação %s\n", corr_wh, forca_wh))
# Correlação 2: Weight vs. Age
forca_aw <- ifelse(abs(corr_aw) >= 0.7, "Forte", "Fraca")
cat(sprintf("Weight vs. Age: %.6f \u2192 Correlação %s\n", corr_aw, forca_aw))
# Correlação 3: FAF vs. TUE
forca_ft <- ifelse(abs(corr_ft) >= 0.7, "Forte", "Fraca")
cat(sprintf("FAF vs. TUE: %.6f \u2192 Correlação %s\n", corr_ft, forca_ft))
cat("------------------------------------------------------\n\n")
# Gráfico 1: Weight vs. Height
plot_1 <- ggplot(data, aes(x = Height, y = Weight)) +
labs(title = paste0("Regressão: Weight vs. Height (Correlação ", forca_wh, ")"),
x = "Height",
y = "Weight") +
# Adicionando um geom_blank para que o ggplot2 use as dimensões dos dados
geom_blank() +
theme_minimal()
print(plot_1)
# Gráfico 2: Weight vs. Age
plot_2 <- ggplot(data, aes(x = Age, y = Weight)) +
labs(title = paste0("Regressão: Weight vs. Age (Correlação ", forca_aw, ")"),
x = "Age",
y = "Weight") +
geom_blank() +
theme_minimal()
print(plot_2)
# Gráfico 3: FAF vs. TUE
plot_3 <- ggplot(data, aes(x = FAF, y = TUE)) +
labs(title = paste0("Regressão: FAF vs. TUE (Correlação ", forca_ft, ")"),
x = "FAF",
y = "TUE") +
geom_blank() +
theme_minimal()
print(plot_3)
# Gráfico 1: Weight vs. Height
plot_1 <- ggplot(data, aes(x = Height, y = Weight)) +
# Restaura os pontos de dados
geom_point(alpha = 0.6, color = "darkgrey") +
# Restaura a linha de regressão linear
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(title = paste0("Regressão: Weight vs. Height (Correlação ", forca_wh, ")"),
x = "Height",
y = "Weight") +
theme_minimal()
print(plot_1)
# Gráfico 2: Weight vs. Age
plot_2 <- ggplot(data, aes(x = Age, y = Weight)) +
# Restaura os pontos de dados
geom_point(alpha = 0.6, color = "darkgrey") +
# Restaura a linha de regressão linear
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = paste0("Regressão: Weight vs. Age (Correlação ", forca_aw, ")"),
x = "Age",
y = "Weight") +
theme_minimal()
print(plot_2)
# Gráfico 3: FAF vs. TUE
plot_3 <- ggplot(data, aes(x = FAF, y = TUE)) +
# Restaura os pontos de dados
geom_point(alpha = 0.6, color = "darkgrey") +
# Restaura a linha de regressão linear
geom_smooth(method = "lm", color = "darkgreen", se = FALSE) +
labs(title = paste0("Regressão: FAF vs. TUE (Correlação ", forca_ft, ")"),
x = "FAF",
y = "TUE") +
theme_minimal()
print(plot_3)
# Correlação 1: Weight e Height
forca_wh <- ifelse(abs(corr_wh) >= 0.7, "Forte", "Fraca")
forca_wh
corr_wh <- cor(data$Weight, data$Height, use = "complete.obs")
corr_aw <- cor(data$Weight, data$Age, use = "complete.obs")
corr_ft <- cor(data$FAF, data$TUE, use = "complete.obs")
corr_wh
data <- read.csv("ObesityDataSet.csv")
# Correlação 1: Weight e Height
corr_wh <- cor(data$Weight, data$Height, use = "complete.obs")
corr_wh
# Correlação 2: Weight e Age
corr_aw <- cor(data$Weight, data$Age, use = "complete.obs")
corr_aw
# Correlação 3: FAF e TUE
corr_ft <- cor(data$FAF, data$TUE, use = "complete.obs")
corr_ft
# Gráfico 1: Weight e Height
plot_1 <- ggplot(data, aes(x = Height, y = Weight)) +
geom_point(alpha = 0.6, color = "darkgrey") +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(title = paste0("Regressão: Weight vs. Height (Correlação ", forca_wh, ")"),
x = "Height",
y = "Weight") +
theme_minimal()
print(plot_1)
# Gráfico 2: Weight e Age
plot_2 <- ggplot(data, aes(x = Age, y = Weight)) +
geom_point(alpha = 0.6, color = "darkgrey") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = paste0("Regressão: Weight vs. Age (Correlação ", forca_aw, ")"),
x = "Age",
y = "Weight") +
theme_minimal()
print(plot_2)
# Gráfico 3: FAF e TUE
plot_3 <- ggplot(data, aes(x = FAF, y = TUE)) +
geom_point(alpha = 0.6, color = "darkgrey") +
geom_smooth(method = "lm", color = "darkgreen", se = FALSE) +
labs(title = paste0("Regressão: FAF vs. TUE (Correlação ", forca_ft, ")"),
x = "FAF",
y = "TUE") +
theme_minimal()
print(plot_3)
print(plot_1)
# Gráfico 1: Weight e Height
plot_1 <- ggplot(data, aes(x = Height, y = Weight)) +
geom_point(alpha = 0.6, color = "darkgrey") +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(title = "Regressão: Weight vs. Height",
x = "Height",
y = "Weight") +
theme_minimal()
# Gráfico 1: Weight e Height
plot_1 <- ggplot(data, aes(x = Height, y = Weight)) +
geom_point(alpha = 0.6, color = "darkgrey") +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(title = paste0("Regressão: Weight vs. Height (Correlação ", forca_wh, ")"),
x = "Height",
y = "Weight") +
theme_minimal()
print(plot_1)
# Gráfico 1: Weight e Height
plot_1 <- ggplot(data, aes(x = Height, y = Weight)) +
geom_point(alpha = 0.6, color = "darkgrey") +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(title = paste0("Regressão: Weight vs. Height (Correlação ", forca_wh, ")"),
x = "Height",
y = "Weight") +
theme_minimal()
ObesityDataSet <- read.csv("~/Faculdade/Aula-de-Calculo/Aula10/ObesityDataSet.csv")
View(ObesityDataSet)
data <- read.csv("ObesityDataSet.csv")
# Correlação 1: Weight e Height
corr_wh <- cor(data$Weight, data$Height, use = "complete.obs")
corr_wh
# Correlação 2: Weight e Age
corr_aw <- cor(data$Weight, data$Age, use = "complete.obs")
corr_aw
# Correlação 3: FAF e TUE
corr_ft <- cor(data$FAF, data$TUE, use = "complete.obs")
corr_ft
# Gráfico 1: Weight e Height
plot_1 <- ggplot(data, aes(x = Height, y = Weight)) +
geom_point(alpha = 0.6, color = "darkgrey") +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(title = paste0("Regressão: Weight vs. Height (Correlação ", forca_wh, ")"),
x = "Height",
y = "Weight") +
theme_minimal()
# Gráfico 1: Weight e Height
plot_1 <- ggplot(data, aes(x = Height, y = Weight)) +
geom_point(alpha = 0.6, color = "darkgrey") +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(title = "Regressão: Weight vs. Height",
x = "Height",
y = "Weight") +
theme_minimal()
print(plot_1)
# Gráfico 1: Weight e Height
plot_1 <- ggplot(data, aes(x = Height, y = Weight)) +
geom_point(alpha = 0.6, color = "darkgrey") +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(title = "Regressão: Weight vs. Height",
x = "Height",
y = "Weight") +
theme_minimal()
print(plot_1)
# Gráfico 2: Weight e Age
plot_2 <- ggplot(data, aes(x = Age, y = Weight)) +
geom_point(alpha = 0.6, color = "darkgrey") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Regressão: Weight vs. Age",
x = "Age",
y = "Weight") +
theme_minimal()
print(plot_2)
# Gráfico 3: FAF e TUE
plot_3 <- ggplot(data, aes(x = FAF, y = TUE)) +
geom_point(alpha = 0.6, color = "darkgrey") +
geom_smooth(method = "lm", color = "darkgreen", se = FALSE) +
labs(title = "Regressão: FAF vs. TUE",
x = "FAF",
y = "TUE") +
theme_minimal()
print(plot_3)
