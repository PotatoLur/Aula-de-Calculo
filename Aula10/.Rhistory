print(typeof(trees$Height))
raio <- subset(trees, round(sqrt(trees$Volume/ (trees$Height * 3.14)),2))
print(sqrt(trees$Volume/ (trees$Height * 3.14)))
print(round(sqrt(trees$Volume/ (trees$Height * 3.14))),2)
print(round(sqrt(trees$Volume/ (trees$Height * 3.14))),1)
raio <- subset(trees, sqrt(trees$Volume/ (trees$Height * 3.14)))
trees$raio <- sqrt(trees$Volume/ (trees$Height * 3.14))
?trees
treess$Altura(M) <- trees$Height * 0.3048
treess$Altura-m <- trees$Height * 0.3048
trees$Altura-m <- trees$Height * 0.3048
trees$Altura <- trees$Height * 0.3048
trees$Circunferencia <- trees$Girth * 2.54
trees$VolumeOk <- trees$Volume * 0.0283168
trees$VolumeOk <- trees$Volume * 0.283168
trees$raio <- sqrt(trees$VolumeOk/ (trees$Altura * 3.14))
trees$exemplo <- factor(
cut(trees$Classificacao),
labels = c("Resedá", "Quaresmeira", "Paineira")
ordered = FALSE
trees$exemplo <- factor(
cut(trees$Classificacao),
labels = c("Resedá", "Quaresmeira", "Paineira"),
ordered = FALSE
)
trees$exemplo <- factor(
cut(trees$Classificacao),
labels = c("Resedá", "Quaresmeira", "Paineira"),
ordered = FALSE
)
trees$exemplo <- factor(
cut(trees$Height, breaks = c(62,70,80,88)),
labels = c("Resedá", "Quaresmeira", "Paineira"),
ordered = FALSE
)
hist(trees$raio)
barplot(table(trees$exemplo))
barplot(table(trees$Classificacao))
barplot(table(trees$Altura))
p <- 200000
n <- 20000
idade <- rnorm(n, 37,7)
idade
idade <- abs(rnorm(n, 37,7))
idade
plot idade
plot(idade)
idade
plot(idade)
idade
idade
rm(iris)
rm(iris3)
rm(trees)
set.seed(123)
idade <- abs(round(rnorm(n, 37,7)) )#abs serve para caso haja um desvio muito grande, ele nao seja negativo
idade
idade <- abs(round(rnorm(n, 37,7)))#abs serve para caso haja um desvio muito grande, ele nao seja negativo
idade
set.seed(123)
idade <- abs(round(rnorm(n, 37,7)))#abs serve para caso haja um desvio muito grande, ele nao seja negativo
idade
altura <- abs(round(rnorm(n, 1.50,0.20)2))
altura <- abs(round(rnorm(n, 1.50,0.20)2))
altura <- abs(round(rnorm(n, 1.50,0.20),2))
altura
peso <- abs(round(rnorm(n, 55, 4),2))
peso
imc <- peso / (altura²)
imc <- peso / (altura ** 2)
imc
imc <- round(peso / (altura ** 2),2)
imc
salario <- abs(round(rnorm(n, 3000.0, 400.0),2))
salario
imc
carro_pop <- rep(0:3, p)
carro_pop
carro_pop <- rep(0:3 length=p)
carro_pop <- rep(0:3 length=p)
carro_pop <- rep(0:3, length=p)
carro_pop
carro <- sample(carro_pop, n)
carro
rm(carro_pop)
filho_pop <- rep(0:2, length=p)
filho <- sample(filho_pop, n) #de onde eu quero tirar a amostra e qnts registro eu quero tirar
filho
escolaridade_pop <- rep(0:6, length = p)
escolaridade_temp <- sample(escolaridade_pop, n)
escolaridade <- factor(escolaridade_temp,
levels = c(0.6),
labels = c(
"analfabeto",
"1 grau",
"2 grau",
"3 grau",
"mestrado",
"doc",
"pos doc",
),
ordered = TRUE
)
escolaridade <- factor(escolaridade_temp,
levels = c(0:6),
labels = c(
"analfabeto",
"1 grau",
"2 grau",
"3 grau",
"mestrado",
"doc",
"pos doc",
),
ordered = TRUE
)
escolaridade <- factor(escolaridade_temp,
levels = c(0:6),
labels = c(
"analfabeto",
"1 grau",
"2 grau",
"3 grau",
"mestrado",
"doc",
"pos doc"
),
ordered = TRUE
)
escolaridade
rm(escolaridade_pop)
rm(escolaridade_temp)
fumante_temo <- rbinom(n,1,0.4)
fumante_temp
rem(fumante_temo)
rm(fumante_temo)
fumante_temp <- rbinom(n,1,0.4)
fumante_temp
barplot(table(fumante_temp))
fumante <- factor(fumante_temp,
levels = c(0,1),
labels = c("não fuma", "fuma"),
ordered = TRUE
)
fumante
df_imc <- dara.frame(
altura,
carro,
escolaridade,
filho,
fumante,
idade,
imc,
peso,
salario
)
df_imc <- data.frame(
altura,
carro,
escolaridade,
filho,
fumante,
idade,
imc,
peso,
salario
)
View(df_imc)
rm(filho_pop)
rm(fumante_temp)
sexo_temp <- rbinom(1,2, 0.5)
sexo_temp
sexo_temp <- rbinom(n,2, 0.5)
sexo_temp
sexo_temp <- rbinom(n,1, 0.5)
sexo_temp
sexo_temp <- rbinom(n,1:2, 0.5)
sexo_temp
sexo_temp <- rbinom(n,1, 0.5)
sexo_temp
sexo <- factor(sexo_temp,
levels = c(1,2),
labels = c("masculino", "feminino"),
ordered = FALSE
)
sexo
sexo <- factor(sexo_temp,
levels = c(0,1),
labels = c("masculino", "feminino"),
ordered = FALSE
)
sexo
#carteira assinada, free lancer, estagiario, estudante, desempregado
profissão <- rep(0:5, length = p)
rm(profissão)
#carteira assinada, free lancer, estagiario, estudante, desempregado
profissão_pop <- rep(0:5, length = p)
#carteira assinada, free lancer, estagiario, estudante, desempregado
profissao_pop <- rep(0:5, length = p)
#carteira assinada, free lancer, estagiario, estudante, desempregado
profissao_pop <- rep(0:5, length = p)
profissao_temp <- sample(profissao_pop, n)
profissao <- factor(profissao_temp,
levels = c(0:5)
labels = "carteira assinada",
rm(profissao_pop)
profissao <- factor(profissao_temp,
levels = c(0:5)
labels = c("carteira assinada",
profissao <- factor(profissao_temp,
levels = c(0:5)
labels = c("carteira assinada",
profissao <- factor(profissao_temp,
levels = c(0:5),
labels = c(
"carteira assinada",
"free lancer",
"estagiario",
"estudante",
"desempregado"
),
ordered = FALSE
)
#carteira assinada, free lancer, estagiario, estudante, desempregado
profissao_pop <- rep(0:4, length = p)
rm(profissao_pop)
rm(profissao_pop)
rm(profissão_pop)
#carteira assinada, free lancer, estagiario, estudante, desempregado
profissao_pop <- rep(0:4, length = p)
profissao_temp <- sample(profissao_pop, n)
profissao <- factor(profissao_temp,
levels = c(0:4),
labels = c(
"carteira assinada",
"free lancer",
"estagiario",
"estudante",
"desempregado"
),
ordered = FALSE
)
profissao
rm(profissao_pop)
rm(profissao_temp)
df_infos <- data.frame(
idade,
altura,
peso,
imc,
salario,
carro,
filho,
escolaridade,
fumante,
sexo,
profissao
)
rm(df_imc)
write.table(df_infos, file = "~/Documents/dados-pessoais.csv", sep = ";")
write.table(df_infos, file = "~/Documentos/dados-pessoais.csv", sep = ";")
View(df_infos)
sexo <- factor(sexo_temp,
levels = c(0,1),
labels = c("masculino", "feminino"),
ordered = FALSE
)
sexo
sexo_temp <- rbinom(n,1, 0.5)
sexo_temp
sexo_temp
sexo_temp <- rbinom(n,2, 0.5)
sexo_temp
sexo_temp <- rbinom(n,3, 0.5)
sexo_temp
sexo_temp <- rbinom(n,3, 0.3)
sexo_temp <- rbinom(n,2, 0.3)
sexo_temp
sexo_temp <- rbinom(n,2, 0.2)
sexo_temp
sexo_temp <- rbinom(n,2, 0.1)
sexo_temp
sexo_temp
sexo_temp <- rbinom(n,1, 0.5)
sexo_temp
sexo_temp <- rbinom(n,1:2, 0.5)
sexo_temp
sexo_temp <- rep(1:2, length = p)
sexo_temp
sexo_temp <- sample(sexo_pop, n)
sexo_pop <- rep(1:2, length = p)
sexo_temp <- sample(sexo_pop, n)
sexo_temp
sexo <- factor(sexo_temp,
levels = c(1,2),
labels = c("masculino", "feminino"),
ordered = FALSE
)
sexo
resultado <- read.csv("~/Downloads/resultado.csv", header=FALSE)
View(resultado)
boxplot(resultado$prova01)
View(resultado)
View(resultado)
boxplot(resultado$prova01)
boxplot(resultado$prova01,
resultado$prova02,
resultado$prova03)
resultado <- read.csv("~/Downloads/resultado.csv", header=FALSE, comment.char="#")
View(resultado)
colnames(resultado) <- c("RA", "prova01", "prova02", "prova03")
boxplot(resultado$prova01,
resultado$prova02,
resultado$prova03)
boxplot(resultado$prova01,
resultado$prova02,
resultado$prova03,
main = "Distribuição de notas por prova",
names = c("Prova 1 ", "Prova 2", "Prova 3"),
ylab = "Nota (0-10)",
col = c("lightblue", "lightgreen", "lightpink"))
library("ggplot2")
library("tidyr")
library('ggplot2')
install.packages("ggplot2")
install.packages("tidyr")
library("ggplot2")
library("tidyr")
resultado_p <- pivot_longer(resultado,
cols = starts_with("prova"), values_to = "nota",
names_to = "prova")
View(resultado_p)
ggplot(mapping = aes(resultado_p$prova, resultado_p$nota))
ggplot(mapping = aes(resultado_p$prova, resultado_p$nota, fill = resultado_p$prova)) +
geom_boxplot(outlier.color = "red")
ggplot(mapping = aes(resultado_p$prova, resultado_p$nota, fill = resultado_p$prova)) +
geom_boxplot(outlier.color = "red") + theme_minimal()
ggplot(mapping = aes(resultado_p$prova, resultado_p$nota, fill = resultado_p$prova)) +
geom_boxplot(outlier.color = "red") + theme_dark()
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
install.packages(c("readr", "dplyr", "ggplot2", "tidyr"))
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
install.packages("knitr")
library(knitr)
tryCatch({
df <- read_csv("ObesityDataset.csv")
cat("Dados 'ObesityDataset.csv' carregados. Dimensões:", nrow(df), "linhas e", ncol(df), "colunas.\n")
}, error = function(e) {
cat("ERRO ao carregar o arquivo: Verifique se 'ObesityDataset.csv' está no diretório de trabalho.\n")
stop("Interrompendo a execução devido a erro de leitura de arquivo.")
})
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(knitr)
tryCatch({
df <- read_csv("ObesityDataset.csv")
cat("Dados 'ObesityDataset.csv' carregados. Dimensões:", nrow(df), "linhas e", ncol(df), "colunas.\n")
}, error = function(e) {
cat("ERRO ao carregar o arquivo: Verifique se 'ObesityDataset.csv' está no diretório de trabalho.\n")
stop("Interrompendo a execução devido a erro de leitura de arquivo.")
})
tryCatch({
df <- read_csv("ObesityDataSet.csv")
cat("Dados 'ObesityDataset.csv' carregados. Dimensões:", nrow(df), "linhas e", ncol(df), "colunas.\n")
}, error = function(e) {
cat("ERRO ao carregar o arquivo: Verifique se 'ObesityDataset.csv' está no diretório de trabalho.\n")
stop("Interrompendo a execução devido a erro de leitura de arquivo.")
})
tryCatch({
df <- read_csv("ObesityDataSet.csv")
cat("Dados 'ObesityDataSet.csv' carregados. Dimensões:", nrow(df), "linhas e", ncol(df), "colunas.\n")
}, error = function(e) {
cat("ERRO ao carregar o arquivo: Verifique se 'ObesityDataset.csv' está no diretório de trabalho.\n")
stop("Interrompendo a execução devido a erro de leitura de arquivo.")
})
df <- read_csv("ObesityDataSet.csv")
ObesityDataSet <- read.csv("~/Documentos/Aula-de-Calculo/Aula10/ObesityDataSet.csv")
View(ObesityDataSet)
tryCatch({
df <- read_csv("ObesityDataSet.csv")
cat("Dados 'ObesityDataSet.csv' carregados. Dimensões:", nrow(df), "linhas e", ncol(df), "colunas.\n")
}, error = function(e) {
cat("ERRO ao carregar o arquivo: Verifique se 'ObesityDataset.csv' está no diretório de trabalho.\n")
stop("Interrompendo a execução devido a erro de leitura de arquivo.")
})
tryCatch({
df <- read_csv("ObesityDataSet.csv")
cat("Dados 'ObesityDataSet.csv' carregados. Dimensões:", nrow(df), "linhas e", ncol(df), "colunas.\n")
}, error = function(e) {
cat("ERRO ao carregar o arquivo: Verifique se 'ObesityDataset.csv' está no diretório de trabalho.\n")
stop("Interrompendo a execução devido a erro de leitura de arquivo.")
})
df <- read_csv("ObesityDataSet.csv")
df <- read_csv("ObesityDataSet.csv")
df <- read_csv("ObesityDataSet.csv")
# --- B. Transform: Limpeza, Tratamento e Formatação ---
cat("\nVerificação de valores ausentes (NAs):\n")
df <- read_csv("ObesityDataSet.csv")
getwd()
setwd("/home/aluno/Documentos/Aula-de-Calculo/Aula10")
df <- read_csv("ObesityDataSet.csv")
# --- B. Transform: Limpeza, Tratamento e Formatação ---
cat("\nVerificação de valores ausentes (NAs):\n")
print(colSums(is.na(df)))
df_clean <- df %>%
mutate(
Height = replace_na(Height, median(Height, na.rm = TRUE)),
Weight = replace_na(Weight, median(Weight, na.rm = TRUE))
)
df_clean <- df_clean %>%
mutate(
Gender = as.factor(Gender),
FAVC = as.factor(FAVC),
SMOK = as.factor(SMOK),
SCC = as.factor(SCC),
MTRANS = as.factor(MTRANS),
NObeyesdad = as.factor(NObeyesdad),
CAEC = factor(CAEC, levels = c("No", "Sometimes", "Frequently", "Always")),
CALC = factor(CALC, levels = c("No", "Sometimes", "Frequently", "Always"))
)
# --- C. Load: Data Frame Pronto para Análise ---
cat("\nEstrutura do Data Frame após a limpeza (Amostra de 5 linhas):\n")
print(head(df_clean, 5))
print(str(df_clean))
# --- 3. VISUALIZAÇÕES EXPLORATÓRIAS (EDA) ---
cat("\n--- VISUALIZAÇÕES EXPLORATÓRIAS (EDA) ---\n")
g1 <- ggplot(df_clean, aes(x = NObeyesdad, fill = NObeyesdad)) +
geom_bar() +
labs(title = "Distribuição dos Níveis de Obesidade",
x = "Nível de Obesidade", y = "Contagem") +
theme_minimal() +
coord_flip()
print(g1)
g2 <- ggplot(df_clean, aes(x = Height, y = Weight, color = NObeyesdad)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "dashed") +
labs(title = "Relação entre Altura e Peso por Nível de Obesidade",
x = "Altura (m)", y = "Peso (kg)") +
theme_bw()
print(g2)
g3 <- ggplot(df_clean, aes(x = CAEC, y = Weight, fill = CAEC)) +
geom_boxplot() +
labs(title = "Impacto do Consumo Entre Refeições (CAEC) no Peso",
x = "Frequência de Consumo Extra (CAEC)", y = "Peso (kg)") +
theme_classic() +
theme(legend.position = "none")
print(g3)
g4 <- ggplot(df_clean, aes(x = Gender, y = Weight, fill = Gender)) +
geom_boxplot() +
labs(title = "Distribuição de Peso por Gênero",
x = "Gênero", y = "Peso (kg)") +
theme_light()
print(g4)
# --- 4. APLICAÇÃO DE MODELOS DE REGRESSÃO LINEAR SIMPLES ---
cat("\n--- MODELAGEM DE REGRESSÃO LINEAR SIMPLES ---\n")
modelo_reg_1 <- lm(Weight ~ Height, data = df_clean)
print("\nRESULTADOS: Regressão 1 (Peso ~ Altura)")
print(summary(modelo_reg_1))
modelo_reg_2 <- lm(Weight ~ Age, data = df_clean)
print("\nRESULTADOS: Regressão 2 (Peso ~ Idade)")
print(summary(modelo_reg_2))
modelo_reg_3 <- lm(Weight ~ FAF, data = df_clean)
print("\nRESULTADOS: Regressão 3 (Peso ~ Frequência de Atividade Física - FAF)")
print(summary(modelo_reg_3))
# --- 5. INTERPRETAÇÃO, ANÁLISES E INSIGHTS ---
resultados_regressao <- data.frame(
Modelo = c("Peso ~ Altura", "Peso ~ Idade", "Peso ~ FAF"),
R_Quadrado = c(summary(modelo_reg_1)$r.squared,
summary(modelo_reg_2)$r.squared,
summary(modelo_reg_3)$r.squared),
Coeficiente_X = c(coef(modelo_reg_1)["Height"],
coef(modelo_reg_2)["Age"],
coef(modelo_reg_3)["FAF"]),
Significancia_X = c(summary(modelo_reg_1)$coefficients["Height", "Pr(>|t|)"],
summary(modelo_reg_2)$coefficients["Age", "Pr(>|t|)"],
summary(modelo_reg_3)$coefficients["FAF", "Pr(>|t|)"])
)
cat("\n--- TABELA RESUMO DOS MODELOS DE REGRESSÃO LINEAR SIMPLES ---\n")
resultados_regressao_formatado <- resultados_regressao %>%
mutate(
R_Quadrado = paste0(round(R_Quadrado * 100, 2), "%"),
Coeficiente_X = round(Coeficiente_X, 2),
Significancia_X = ifelse(Significancia_X < 0.001, "< 0.001",
format(Significancia_X, scientific = FALSE, digits = 3))
)
print(kable(resultados_regressao_formatado, caption = "Comparativo de Modelos", align = 'c'))
cat("\n--- ANÁLISES E INSIGHTS PARA DECISÃO DE NEGÓCIO ---\n")
cat("\n**1. O DOMÍNIO DA RELAÇÃO BIOLÓGICA (Peso ~ Altura)**\n")
cat(paste("  - **R²:", resultados_regressao_formatado[1, "R_Quadrado"], ".** A Altura é o fator **mais dominante** na variação do Peso.\n"))
cat(paste("  - **Coeficiente (Slope):**", resultados_regressao_formatado[1, "Coeficiente_X"], "kg/m.\n"))
cat("  - **Decisão/Insight:** Confirma a necessidade de usar o **Índice de Massa Corporal (IMC)** em qualquer modelo preditivo de obesidade mais robusto.\n")
cat("\n**2. IDADE É PREDITOR FRACO, MAS SIGNIFICATIVO (Peso ~ Idade)**\n")
cat(paste("  - **R²:", resultados_regressao_formatado[2, "R_Quadrado"], ".** A Idade, sozinha, é uma preditora muito **fraca** do Peso.\n"))
cat(paste("  - **Coeficiente (Slope):**", resultados_regressao_formatado[2, "Coeficiente_X"], "kg/ano.\n"))
cat("  - **Decisão/Insight:** Intervenções de saúde pública devem se concentrar em **mudar comportamentos** (dieta, exercício) em vez de apenas focar no grupo etário.\n")
cat("\n**3. FREQUÊNCIA DE ATIVIDADE FÍSICA (FAF) TEM RELAÇÃO LINEAR NEGATIVA**\n")
faf_coef <- as.numeric(resultados_regressao_formatado[3, "Coeficiente_X"])
cat(paste("  - **R²:", resultados_regressao_formatado[3, "R_Quadrado"], ".** Poder explicativo também baixo.\n"))
cat(paste("  - **Coeficiente (Slope):**", faf_coef, "kg. (Negativo).\n"))
cat("  - **Interpretação:** Para cada aumento de **1 nível** na escala de FAF, o Peso médio esperado **diminui** em cerca de", abs(faf_coef), "kg.\n")
cat("  - **Decisão/Insight:** Programas de saúde devem priorizar a **melhoria da FAF** como uma intervenção de alto impacto comportamental para a redução do peso.\n")
cat("\n**PRÓXIMOS PASSOS:**\n")
cat("A próxima etapa é construir um **Modelo de Regressão Múltipla** para verificar o efeito combinado e isolado de cada variável no Peso.\n")
